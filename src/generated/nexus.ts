/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as prisma from "@prisma/client"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PersonWhereUniqueInput: { // input type
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Mutation: {};
  Person: prisma.Person;
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  PersonWhereUniqueInput: NexusGenInputs['PersonWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createPerson: NexusGenRootTypes['Person']; // Person!
    deleteOnePerson: NexusGenRootTypes['Person'] | null; // Person
    updatePerson: NexusGenRootTypes['Person']; // Person!
  }
  Person: { // field return type
    age: number; // Int!
    id: string; // String!
    name: string; // String!
    updatedAt: any; // DateTime!
  }
  Query: { // field return type
    filterPeople: NexusGenRootTypes['Person'][]; // [Person!]!
    People: NexusGenRootTypes['Person'][]; // [Person!]!
    Person: NexusGenRootTypes['Person'] | null; // Person
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPerson: { // args
      age: number; // Int!
      name: string; // String!
    }
    deleteOnePerson: { // args
      where: NexusGenInputs['PersonWhereUniqueInput']; // PersonWhereUniqueInput!
    }
    updatePerson: { // args
      age?: number | null; // Int
      id?: string | null; // ID
      name?: string | null; // String
    }
  }
  Query: {
    filterPeople: { // args
      searchstring?: string | null; // String
    }
    Person: { // args
      id?: string | null; // ID
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Person" | "Query";

export type NexusGenInputNames = "PersonWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}